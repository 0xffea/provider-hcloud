name: hetznercloud/hcloud
resources:
    hcloud_certificate:
        subCategory: ""
        description: Provides a Hetzner Cloud Certificate to represent a TLS certificate in the Hetzner Cloud.
        name: hcloud_certificate
        title: hcloud_certificate
        argumentDocs: {}
        importStatements: []
    hcloud_firewall:
        subCategory: ""
        description: Provides a Hetzner Cloud Firewall to represent a Firewall in the Hetzner Cloud.
        name: hcloud_firewall
        title: hcloud_firewall
        examples:
            - name: myfirewall
              manifest: |-
                {
                  "name": "my-firewall",
                  "rule": [
                    {
                      "direction": "in",
                      "protocol": "icmp",
                      "source_ips": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    },
                    {
                      "direction": "in",
                      "port": "80-85",
                      "protocol": "tcp",
                      "source_ips": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    }
                  ]
                }
              dependencies:
                hcloud_server.node1: |-
                    {
                      "firewall_ids": [
                        "${hcloud_firewall.myfirewall.id}"
                      ],
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
        argumentDocs:
            apply_to: (Optional) Resources the firewall should be assigned to
            description: '- (Optional, string) Description of the firewall rule'
            destination_ips: |-
                - (Required, List) List of CIDRs that are allowed within this Firewall Rule (when direction
                is out)
            direction: '- (Required, string) Direction of the Firewall Rule. in'
            id: '- (int) Unique ID of the Firewall.'
            label_selector: |-
                - (Optional, string) Label Selector to select servers the firewall should be applied to (only one
                of server and label_selectorcan be applied in one block)
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            name: '- (Optional, string) Name of the Firewall.'
            port: |-
                - (Required, string) Port of the Firewall Rule. Required when protocol is tcp or udp. You can use any
                to allow all ports for the specific protocol. Port ranges are also possible: 80-85 allows all ports between 80 and
                85.
            protocol: '- (Required, string) Protocol of the Firewall Rule. tcp, icmp, udp, gre, esp'
            rule: '- (Optional) Configuration of a Rule from this Firewall.'
            server: |-
                - (Optional, int) ID of the server you want to apply the firewall to (only one of server
                and label_selectorcan be applied in one block)
            source_ips: '- (Required, List) List of CIDRs that are allowed within this Firewall Rule'
        importStatements: []
    hcloud_firewall_attachment:
        subCategory: ""
        description: Attaches resources to a Hetzner Cloud Firewall.
        name: hcloud_firewall_attachment
        title: hcloud_firewall_attachment
        examples:
            - name: fw_ref
              manifest: |-
                {
                  "firewall_id": "${hcloud_firewall.basic_firewall.id}",
                  "server_ids": [
                    "${hcloud_server.test_server.id}"
                  ]
                }
              references:
                firewall_id: hcloud_firewall.basic_firewall.id
              dependencies:
                hcloud_firewall.basic_firewall: |-
                    {
                      "name": "basic_firewall"
                    }
                hcloud_server.test_server: |-
                    {
                      "image": "ubuntu-20.04",
                      "name": "test-server",
                      "server_type": "cx11"
                    }
            - name: fw_ref
              manifest: |-
                {
                  "firewall_id": "${hcloud_firewall.basic_firewall.id}",
                  "label_selectors": [
                    "firewall-attachment=test-server"
                  ]
                }
              references:
                firewall_id: hcloud_firewall.basic_firewall.id
              dependencies:
                hcloud_firewall.basic_firewall: |-
                    {
                      "name": "basic_firewall"
                    }
                hcloud_server.test_server: |-
                    {
                      "image": "ubuntu-20.04",
                      "labels": {
                        "firewall-attachment": "test-server"
                      },
                      "name": "test-server",
                      "server_type": "cx11"
                    }
            - name: deny_all_att
              manifest: |-
                {
                  "firewall_id": "${hcloud_firewall.deny_all.id}",
                  "server_ids": [
                    "${hcloud_server.test_server.id}"
                  ]
                }
              references:
                firewall_id: hcloud_firewall.deny_all.id
              dependencies:
                hcloud_firewall.allow_rules: |-
                    {
                      "name": "allow_rules",
                      "rule": [
                        {
                          "destination_ips": [
                            "${format(\"%s/32\", hcloud_server.test_server.ipv4_address)}"
                          ],
                          "direction": "in",
                          "port": "22",
                          "protocol": "tcp",
                          "source_ips": [
                            "0.0.0.0/0",
                            "::/0"
                          ]
                        }
                      ]
                    }
                hcloud_firewall.deny_all: |-
                    {
                      "name": "deny_all"
                    }
                hcloud_server.test_server: |-
                    {
                      "firewall_ids": [
                        "${hcloud_firewall.deny_all.id}"
                      ],
                      "ignore_remote_firewall_ids": true,
                      "image": "ubuntu-20.04",
                      "name": "test-server",
                      "server_type": "cx11"
                    }
            - name: allow_rules_att
              manifest: |-
                {
                  "firewall_id": "${hcloud_firewall.allow_rules.id}",
                  "server_ids": [
                    "${hcloud_server.test_server.id}"
                  ]
                }
              references:
                firewall_id: hcloud_firewall.allow_rules.id
              dependencies:
                hcloud_firewall.allow_rules: |-
                    {
                      "name": "allow_rules",
                      "rule": [
                        {
                          "destination_ips": [
                            "${format(\"%s/32\", hcloud_server.test_server.ipv4_address)}"
                          ],
                          "direction": "in",
                          "port": "22",
                          "protocol": "tcp",
                          "source_ips": [
                            "0.0.0.0/0",
                            "::/0"
                          ]
                        }
                      ]
                    }
                hcloud_firewall.deny_all: |-
                    {
                      "name": "deny_all"
                    }
                hcloud_server.test_server: |-
                    {
                      "firewall_ids": [
                        "${hcloud_firewall.deny_all.id}"
                      ],
                      "ignore_remote_firewall_ids": true,
                      "image": "ubuntu-20.04",
                      "name": "test-server",
                      "server_type": "cx11"
                    }
        argumentDocs:
            firewall_id: |-
                - (Required, int) ID of the firewall the resources
                should be attached to.
            id: (int) - Unique ID representing this hcloud_firewall_attachment.
            label_selectors: |-
                - (Optional, List) List of label selectors used to
                select resources to attach to the firewall.
            server_ids: |-
                - (Optional, List) List of Server IDs to attach to the
                firewall.
        importStatements: []
    hcloud_floating_ip:
        subCategory: ""
        description: Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.
        name: hcloud_floating_ip
        title: hcloud_floating_ip
        examples:
            - name: master
              manifest: |-
                {
                  "server_id": "${hcloud_server.node1.id}",
                  "type": "ipv4"
                }
              references:
                server_id: hcloud_server.node1.id
              dependencies:
                hcloud_server.node1: |-
                    {
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
        argumentDocs:
            delete_protection: '- (Optional, bool) Enable or disable delete protection.'
            description: '- (Optional, string) Description of the Floating IP.'
            home_location: '- (Optional, string) Name of home location (routing is optimized for that location). Optional if server_id argument is passed.'
            id: '- (int) Unique ID of the Floating IP.'
            ip_address: '- (string) IP Address of the Floating IP.'
            ip_network: '- (string) IPv6 subnet. (Only set if type is ipv6)'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            name: '- (Optional, string) Name of the Floating IP.'
            server_id: '- (Optional, int) Server to assign the Floating IP to.'
            type: '- (Required, string) Type of the Floating IP. ipv4 ipv6'
        importStatements: []
    hcloud_floating_ip_assignment:
        subCategory: ""
        description: Provides a Hetzner Cloud Floating IP Assignment to assign a Floating IP to a Hetzner Cloud Server.
        name: hcloud_floating_ip_assignment
        title: hcloud_floating_ip_assignment
        examples:
            - name: main
              manifest: |-
                {
                  "floating_ip_id": "${hcloud_floating_ip.master.id}",
                  "server_id": "${hcloud_server.node1.id}"
                }
              references:
                floating_ip_id: hcloud_floating_ip.master.id
                server_id: hcloud_server.node1.id
              dependencies:
                hcloud_floating_ip.master: |-
                    {
                      "home_location": "nbg1",
                      "type": "ipv4"
                    }
                hcloud_server.node1: |-
                    {
                      "datacenter": "fsn1-dc8",
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
        argumentDocs:
            floating_ip_id: '- (Required, int) ID of the Floating IP.'
            id: '- (int) Unique ID of the Floating IP Assignment.'
            server_id: '- (Required, int) Server to assign the Floating IP to.'
        importStatements: []
    hcloud_load_balancer:
        subCategory: ""
        description: Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.
        name: hcloud_load_balancer
        title: hcloud_load_balancer
        examples:
            - name: load_balancer
              manifest: |-
                {
                  "load_balancer_type": "lb11",
                  "location": "nbg1",
                  "name": "my-load-balancer",
                  "target": [
                    {
                      "server_id": "${hcloud_server.myserver.id}",
                      "type": "server"
                    }
                  ]
                }
              references:
                target.server_id: hcloud_server.myserver.id
              dependencies:
                hcloud_server.myserver: |-
                    {
                      "image": "ubuntu-18.04",
                      "name": "server-%d",
                      "server_type": "cx11"
                    }
        argumentDocs:
            algorithm: '- (Optional) Configuration of the algorithm the Load Balancer use.'
            delete_protection: '- (Optional, bool) Enable or disable delete protection.'
            id: '- (int) Unique ID of the Load Balancer.'
            ipv4: '- (string) IPv4 Address of the Load Balancer.'
            ipv6: '- (string) IPv6 Address of the Load Balancer.'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            load_balancer_type: '- (Required, string) Type of the Load Balancer.'
            location: '- (Optional, string) The location name of the Load Balancer. Require when no network_zone is set.'
            name: '- (Required, string) Name of the Load Balancer.'
            network_id: '- (int) ID of the first private network that this Load Balancer is connected to.'
            network_ip: '- (string) IP of the Load Balancer in the first private network that it is connected to.'
            network_zone: '- (Optional, string) The Network Zone of the Load Balancer. Require when no location is set.'
            type: '- (Required, string) Type of the Load Balancer Algorithm. round_robin or least_connections'
        importStatements: []
    hcloud_load_balancer_network:
        subCategory: ""
        description: Provides a Hetzner Cloud Load Balancer Network to represent a private network on a Load Balancer in the Hetzner Cloud.
        name: hcloud_load_balancer_network
        title: hcloud_load_balancer_network
        examples:
            - name: srvnetwork
              manifest: |-
                {
                  "ip": "10.0.1.5",
                  "load_balancer_id": "${hcloud_load_balancer.lb1.id}",
                  "network_id": "${hcloud_network.mynet.id}"
                }
              references:
                load_balancer_id: hcloud_load_balancer.lb1.id
                network_id: hcloud_network.mynet.id
              dependencies:
                hcloud_load_balancer.lb1: |-
                    {
                      "load_balancer_type": "lb11",
                      "name": "lb1",
                      "network_zone": "eu-central"
                    }
                hcloud_network.mynet: |-
                    {
                      "ip_range": "10.0.0.0/8",
                      "name": "my-net"
                    }
                hcloud_network_subnet.foonet: |-
                    {
                      "ip_range": "10.0.1.0/24",
                      "network_id": "${hcloud_network.mynet.id}",
                      "network_zone": "eu-central",
                      "type": "cloud"
                    }
        argumentDocs:
            enable_public_interface: |-
                - (Optional, bool) Enable or disable the
                Load Balancers public interface. Default: true
            id: '- (string) ID of the Load Balancer network.'
            ip: |-
                - (Optional, string) IP to request to be assigned to this Load
                Balancer. If you do not provide this then you will be auto assigned an
                IP address.
            load_balancer_id: '- (Required, int) ID of the Load Balancer.'
            network_id: |-
                - (Optional, int) ID of the network which should be added
                to the Load Balancer. Required if subnet_id is not set. Successful
                creation of the resource depends on the existence of a subnet in the
                Hetzner Cloud Backend. Using network_id will not create an explicit
                dependency between the Load Balancer and the subnet. Therefore
                depends_on may need to be used. Alternatively the subnet_id
                property can be used, which will create an explicit dependency between
                hcloud_load_balancer_network and the existence of a subnet.
            subnet_id: |-
                - (Optional, string) ID of the sub-network which should be
                added to the Load Balancer. Required if network_id is not set.
                Note: if the ip property is missing, the Load Balancer is
                currently added to the last created subnet.
        importStatements: []
    hcloud_load_balancer_service:
        subCategory: ""
        description: Define services for Hetzner Cloud Load Balancers.
        name: hcloud_load_balancer_service
        title: hcloud_load_balancer_service
        examples:
            - name: load_balancer_service
              manifest: |-
                {
                  "health_check": [
                    {
                      "http": [
                        {
                          "domain": "example.com",
                          "path": "/healthz",
                          "response": "OK",
                          "status_codes": [
                            "200"
                          ],
                          "tls": true
                        }
                      ],
                      "interval": 10,
                      "port": 80,
                      "protocol": "http",
                      "timeout": 5
                    }
                  ],
                  "http": [
                    {
                      "cookie_name": "EXAMPLE_STICKY",
                      "sticky_sessions": true
                    }
                  ],
                  "load_balancer_id": "${hcloud_load_balancer.load_balancer.id}",
                  "protocol": "http"
                }
              references:
                load_balancer_id: hcloud_load_balancer.load_balancer.id
              dependencies:
                hcloud_load_balancer.load_balancer: |-
                    {
                      "load_balancer_type": "lb11",
                      "location": "nbg1",
                      "name": "my-load-balancer"
                    }
        argumentDocs:
            certificates: '- (Optional, list[int]) List of IDs from certificates which the Load Balancer has.'
            cookie_lifetime: '- (Optional, int) Lifetime of the cookie for sticky session (in seconds). Default: 300'
            cookie_name: '- (Optional, string) Name of the cookie for sticky session. Default: HCLBSTICKY'
            destination_port: '- (Optional, int) Port the service connects to the targets on, required if protocol is tcp. Can be everything between 1 and 65535.'
            domain: '- (Optional, string) Domain we try to access when performing the Health Check.'
            health_check: '- (Optional, block) Health Check configuration when protocol is http or https.'
            http: '- (Optional, block) HTTP configuration when protocol is http or https.'
            interval: '- (Required, int) Interval how often the health check will be performed, in seconds.'
            listen_port: '- (Optional, int) Port the service listen on, required if protocol is tcp. Can be everything between 1 and 65535. Must be unique per Load Balancer.'
            load_balancer_id: '- (Required, int) Id of the load balancer this service belongs to.'
            path: '- (Optional, string) Path we try to access when performing the Health Check.'
            port: '- (Required, int) Port the health check tries to connect to, required if protocol is tcp. Can be everything between 1 and 65535. Must be unique per Load Balancer.'
            protocol: '- (Required, string) Protocol of the service. http, https or tcp'
            proxyprotocol: '- (Optional, bool) Enable proxyprotocol.'
            redirect_http: '- (Optional, bool) Redirect HTTP to HTTPS traffic. Only supported for services with protocol https using the default HTTP port 80.'
            response: '- (Optional, string) Response we expect to be included in the Target response when a Health Check was performed.'
            retries: '- (Optional, int) Number of tries a health check will be performed until a target will be listed as unhealthy.'
            status_codes: '- (Optional, list[string]) We expect that the target answers with these status codes. If not the target is marked as unhealthy.'
            sticky_sessions: '- (Optional, bool) Enable sticky sessions'
            timeout: '- (Required, int) Timeout when a health check try will be canceled if there is no response, in seconds.'
            tls: '- (Optional, bool) Enable TLS certificate checking.'
        importStatements: []
    hcloud_load_balancer_target:
        subCategory: ""
        description: Adds a target to a Hetzner Cloud Load Balancer.
        name: hcloud_load_balancer_target
        title: hcloud_load_balancer_target
        examples:
            - name: load_balancer_target
              manifest: |-
                {
                  "load_balancer_id": "${hcloud_load_balancer.load_balancer.id}",
                  "server_id": "${hcloud_server.my_server.id}",
                  "type": "server"
                }
              references:
                load_balancer_id: hcloud_load_balancer.load_balancer.id
                server_id: hcloud_server.my_server.id
              dependencies:
                hcloud_load_balancer.load_balancer: |-
                    {
                      "load_balancer_type": "lb11",
                      "location": "nbg1",
                      "name": "my-load-balancer"
                    }
                hcloud_server.my_server: |-
                    {
                      "image": "ubuntu-18.04",
                      "name": "my-server",
                      "server_type": "cx11"
                    }
        argumentDocs:
            ip: |-
                - (Optional, string) IP address for an IP Target. Required if
                type is ip.
            label_selector: |-
                - (Optional, string) Label Selector selecting targets
                for this Load Balancer. Required if type is label_selector.
            load_balancer_id: |-
                - (Required, int) ID of the Load Balancer to which
                the target gets attached.
            server: ': server id, for example: 123'
            server_id: |-
                - (Optional, int) ID of the server which should be a
                target for this Load Balancer. Required if type is server
            type: |-
                - (Required, string) Type of the target. Possible values
                server, label_selector, ip.
            use_private_ip: |-
                - (Optional, bool) use the private IP to connect to
                Load Balancer targets. Only allowed if type is server or
                label_selector.
        importStatements: []
    hcloud_managed_certificate:
        subCategory: ""
        description: Obtain a TLS Certificate managed by Hetzner Cloud.
        name: hcloud_managed_certificate
        title: hcloud_managed_certificate
        examples:
            - name: managed_cert
              manifest: |-
                {
                  "domain_names": [
                    "*.example.com",
                    "example.com"
                  ],
                  "labels": {
                    "label_1": "value_1",
                    "label_2": "value_2"
                  },
                  "name": "managed_cert"
                }
        argumentDocs:
            certificate: '- (string) PEM encoded TLS certificate.'
            created: '- (string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).'
            domain_names: |-
                - (Required, list) Domain names for which a certificate
                should be obtained.
            fingerprint: '- (string) Fingerprint of the certificate.'
            id: '- (int) Unique ID of the certificate.'
            labels: |-
                - (Optional, map) User-defined labels (key-value pairs) the
                certificate should be created with.
            name: '- (Required, string) Name of the Certificate.'
            not_valid_after: '- (string) Point in time when the Certificate stops being valid (in ISO-8601 format).'
            not_valid_before: '- (string) Point in time when the Certificate becomes valid (in ISO-8601 format).'
        importStatements: []
    hcloud_network:
        subCategory: ""
        description: Provides a Hetzner Cloud Network to represent a Network in the Hetzner Cloud.
        name: hcloud_network
        title: hcloud_network
        examples:
            - name: privNet
              manifest: |-
                {
                  "ip_range": "10.0.1.0/24",
                  "name": "my-net"
                }
        argumentDocs:
            delete_protection: '- (Optional, bool) Enable or disable delete protection.'
            expose_routes_to_vswitch: '- (Optional, bool) Enable or disable exposing the routes to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.'
            id: '- (int) Unique ID of the network.'
            ip_range: '- (Required, string) IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            name: '- (Required, string) Name of the Network to create (must be unique per project).'
        importStatements: []
    hcloud_network_route:
        subCategory: ""
        description: Provides a Hetzner Cloud Network Route to represent a Network route in the Hetzner Cloud.
        name: hcloud_network_route
        title: hcloud_network_route
        examples:
            - name: privNet
              manifest: |-
                {
                  "destination": "10.100.1.0/24",
                  "gateway": "10.0.1.1",
                  "network_id": "${hcloud_network.mynet.id}"
                }
              references:
                network_id: hcloud_network.mynet.id
              dependencies:
                hcloud_network.mynet: |-
                    {
                      "ip_range": "10.0.0.0/8",
                      "name": "my-net"
                    }
        argumentDocs:
            destination: '- (Required, string) Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.'
            gateway: '- (Required, string) Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.'
            id: '- (int) Unique ID of the Network route.'
            network_id: '- (Required, int) ID of the Network the route should be added to.'
        importStatements: []
    hcloud_network_subnet:
        subCategory: ""
        description: Provides a Hetzner Cloud Network Subnet to represent a Subnet in the Hetzner Cloud.
        name: hcloud_network_subnet
        title: hcloud_network_subnet
        examples:
            - name: foonet
              manifest: |-
                {
                  "ip_range": "10.0.1.0/24",
                  "network_id": "${hcloud_network.mynet.id}",
                  "network_zone": "eu-central",
                  "type": "cloud"
                }
              references:
                network_id: hcloud_network.mynet.id
              dependencies:
                hcloud_network.mynet: |-
                    {
                      "ip_range": "10.0.0.0/8",
                      "name": "my-net"
                    }
        argumentDocs:
            id: '- (string) ID of the Network subnet.'
            ip_range: '- (Required, string) Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.'
            network_id: '- (Required, int) ID of the Network the subnet should be added to.'
            network_zone: '- (Required, string) Name of network zone.'
            type: '- (Required, string) Type of subnet. server, cloud or vswitch'
            vswitch_id: '- (Optional, int) ID of the vswitch, Required if type is vswitch'
        importStatements: []
    hcloud_placement_group:
        subCategory: ""
        description: Provides a Hetzner Cloud Placement Group to represent a Placement Group in the Hetzner Cloud.
        name: hcloud_placement_group
        title: hcloud_placement_group
        examples:
            - name: my-placement-group
              manifest: |-
                {
                  "labels": {
                    "key": "value"
                  },
                  "name": "my-placement-group",
                  "type": "spread"
                }
              dependencies:
                hcloud_server.node1: |-
                    {
                      "image": "debian-11",
                      "name": "node1",
                      "placement_group_id": "${hcloud_placement_group.my-placement-group.id}",
                      "server_type": "cx11"
                    }
        argumentDocs:
            id: '- (int) Unique ID of the Placement Group.'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            name: '- (Optional, string) Name of the Placement Group.'
            type: '- (Required, string) Type of the Placement Group.'
        importStatements: []
    hcloud_primary_ip:
        subCategory: ""
        description: Provides a Hetzner Cloud Primary IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.
        name: hcloud_primary_ip
        title: hcloud_primary_ip
        examples:
            - name: main
              manifest: |-
                {
                  "assignee_type": "server",
                  "auto_delete": true,
                  "datacenter": "fsn1-dc14",
                  "labels": {
                    "hallo": "welt"
                  },
                  "name": "primary_ip_test",
                  "type": "ipv4"
                }
              dependencies:
                hcloud_server.server_test: |-
                    {
                      "datacenter": "fsn1-dc14",
                      "image": "ubuntu-20.04",
                      "labels": {
                        "test": "tessst1"
                      },
                      "name": "test-server",
                      "public_net": [
                        {
                          "ipv4": "${hcloud_primary_ip.main.id}"
                        }
                      ],
                      "server_type": "cx11"
                    }
        argumentDocs:
            assignee_id: '- (int) ID of the assigned resource'
            assignee_type: '- (string) The type of the assigned resource. Currently supported: server'
            auto_delete: |-
                - (bool) Whether auto delete is enabled.
                Important note:It is recommended to set auto_delete to false, because if a server assigned to the managed ip is getting deleted, it will also delete the primary IP which will break the TF state.
            datacenter: '- (string, optional) The datacenter name to create the resource in.'
            delete_protection: '- (bool) Whether delete protection is enabled.'
            id: '- (int) Unique ID of the Primary IP.'
            ip_address: '- (string) IP Address of the Primary IP.'
            ip_network: '- (string) IPv6 subnet of the Primary IP for IPv6 addresses. (Only set if type is ipv6)'
            labels: '- (string) Description of the Primary IP.'
            name: '- (string) Name of the Primary IP.'
            type: '- (string) Type of the Primary IP. ipv4 or ipv6'
        importStatements: []
    hcloud_rdns:
        subCategory: ""
        description: Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Servers, Primary IPs, Floating IPs or Load Balancers.
        name: hcloud_rdns
        title: hcloud_rdns
        examples:
            - name: master
              manifest: |-
                {
                  "dns_ptr": "example.com",
                  "ip_address": "${hcloud_server.node1.ipv4_address}",
                  "server_id": "${hcloud_server.node1.id}"
                }
              references:
                ip_address: hcloud_server.node1.ipv4_address
                server_id: hcloud_server.node1.id
              dependencies:
                hcloud_server.node1: |-
                    {
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
            - name: primary1
              manifest: |-
                {
                  "dns_ptr": "example.com",
                  "ip_address": "${hcloud_primary_ip.primary1.ip_address}",
                  "primary_ip_id": "${hcloud_primary_ip.primary1.id}"
                }
              references:
                ip_address: hcloud_primary_ip.primary1.ip_address
                primary_ip_id: hcloud_primary_ip.primary1.id
              dependencies:
                hcloud_primary_ip.primary1: |-
                    {
                      "datacenter": "nbg1-dc3",
                      "type": "ipv4"
                    }
            - name: floating_master
              manifest: |-
                {
                  "dns_ptr": "example.com",
                  "floating_ip_id": "${hcloud_floating_ip.floating1.id}",
                  "ip_address": "${hcloud_floating_ip.floating1.ip_address}"
                }
              dependencies:
                hcloud_floating_ip.floating1: |-
                    {
                      "home_location": "nbg1",
                      "type": "ipv4"
                    }
            - name: load_balancer_master
              manifest: |-
                {
                  "dns_ptr": "example.com",
                  "ip_address": "${hcloud_load_balancer.load_balancer1.ipv4}",
                  "load_balancer_id": "${hcloud_load_balancer.load_balancer1.id}"
                }
              dependencies:
                hcloud_load_balancer.load_balancer1: |-
                    {
                      "load_balancer_type": "lb11",
                      "location": "fsn1",
                      "name": "load_balancer1"
                    }
        argumentDocs:
            dns_ptr: '- (Required, string) The DNS address the ip_address should resolve to.'
            floating_ip_id: '- (Required, int) The Floating IP the ip_address belongs to.'
            id: '- (int) Unique ID of the Reverse DNS Entry.'
            ip_address: '- (Required, string) The IP address that should point to dns_ptr.'
            load_balancer_id: '- (Required, int) The Load Balancer the ip_address belongs to.'
            primary_ip_id: '- (Required, int) The Primary IP the ip_address belongs to.'
            server_id: '- (Required, int) The server the ip_address belongs to.'
        importStatements: []
    hcloud_server:
        subCategory: ""
        description: Provides an Hetzner Cloud server resource. This can be used to create, modify, and delete servers. Servers also support provisioning.
        name: hcloud_server
        title: hcloud_server
        examples:
            - name: node1
              manifest: |-
                {
                  "image": "debian-11",
                  "name": "node1",
                  "public_net": [
                    {
                      "ipv4_enabled": true,
                      "ipv6_enabled": true
                    }
                  ],
                  "server_type": "cx11"
                }
            - name: server_test
              manifest: |-
                {
                  "datacenter": "fsn1-dc14",
                  "image": "ubuntu-20.04",
                  "labels": {
                    "test": "tessst1"
                  },
                  "name": "test-server",
                  "public_net": [
                    {
                      "ipv4": "${hcloud_primary_ip.primary_ip_1.id}",
                      "ipv4_enabled": true,
                      "ipv6_enabled": false
                    }
                  ],
                  "server_type": "cx11"
                }
              references:
                public_net.ipv4: hcloud_primary_ip.primary_ip_1.id
              dependencies:
                hcloud_primary_ip.primary_ip_1: |-
                    {
                      "assignee_type": "server",
                      "auto_delete": true,
                      "datacenter": "fsn1-dc14",
                      "labels": {
                        "hallo": "welt"
                      },
                      "name": "primary_ip_test",
                      "type": "ipv4"
                    }
            - name: server
              manifest: |-
                {
                  "depends_on": [
                    "${hcloud_network_subnet.network-subnet}"
                  ],
                  "image": "ubuntu-20.04",
                  "location": "nbg1",
                  "name": "server",
                  "network": [
                    {
                      "alias_ips": [
                        "10.0.1.6",
                        "10.0.1.7"
                      ],
                      "ip": "10.0.1.5",
                      "network_id": "${hcloud_network.network.id}"
                    }
                  ],
                  "server_type": "cx11"
                }
              references:
                network.network_id: hcloud_network.network.id
              dependencies:
                hcloud_network.network: |-
                    {
                      "ip_range": "10.0.0.0/16",
                      "name": "network"
                    }
                hcloud_network_subnet.network-subnet: |-
                    {
                      "ip_range": "10.0.1.0/24",
                      "network_id": "${hcloud_network.network.id}",
                      "network_zone": "eu-central",
                      "type": "cloud"
                    }
            - name: from_snapshot
              manifest: |-
                {
                  "image": "${data.hcloud_image.packer_snapshot.id}",
                  "name": "from-snapshot",
                  "public_net": [
                    {
                      "ipv4_enabled": true,
                      "ipv6_enabled": true
                    }
                  ],
                  "server_type": "cx11"
                }
              references:
                image: data.hcloud_image.packer_snapshot.id
            - name: server_test
              manifest: |-
                {
                  "public_net": [
                    {
                      "ipv4": "${hcloud_primary_ip.primary_ip_1.id}",
                      "ipv4_enabled": true,
                      "ipv6_enabled": false
                    }
                  ]
                }
              references:
                public_net.ipv4: hcloud_primary_ip.primary_ip_1.id
            - name: server_test
              manifest: |-
                {
                  "public_net": [
                    {
                      "ipv4": "${hcloud_primary_ip.primary_ip_1.id}",
                      "ipv4_enabled": true,
                      "ipv6_enabled": true
                    }
                  ]
                }
              references:
                public_net.ipv4: hcloud_primary_ip.primary_ip_1.id
            - name: server_test
              manifest: |-
                {
                  "public_net": [
                    {
                      "ipv4_enabled": true,
                      "ipv6_enabled": true
                    }
                  ]
                }
        argumentDocs:
            alias_ips: '- (Optional, list) Alias IPs the server should have in the Network.'
            allow_deprecated_images: '- (Optional, bool) Enable the use of deprecated images (default: false). Note Deprecated images will be removed after three months. Using them is then no longer possible.'
            backup_window: '- (string) The backup window of the server, if enabled.'
            backups: '- (Optional, bool) Enable or disable backups.'
            datacenter: '- (Optional, string) The datacenter name to create the server in. nbg1-dc3, fsn1-dc14, hel1-dc2, ash-dc1 or hil-dc1'
            delete_protection: '- (Optional, bool) Enable or disable delete protection (Needs to be the same as rebuild_protection).'
            firewall_ids: '- (Optional, list) Firewall IDs the server should be attached to on creation.'
            id: '- (int) Unique ID of the server.'
            ignore_remote_firewall_ids: |-
                - (Optional, bool) Ignores any updates
                to the firewall_ids argument which were received from the server.
                This should not be used in normal cases. See the documentation of the
                hcloud_firewall_attachment resource for a reason to use this
                argument.
            image: '- (Required, string) Name or ID of the image the server is created from. Note the image property is only required when using the resource to create servers. As the Hetzner Cloud API may return servers without an image ID set it is not marked as required in the Terraform Provider itself. Thus, users will get an error from the underlying client library if they forget to set the property and try to create a server.'
            ip: '- (Optional, string) Specify the IP the server should get in the network'
            ipv4_address: '- (string) The IPv4 address.'
            ipv6_address: '- (string) The first IPv6 address of the assigned network.'
            ipv6_network: '- (string) The IPv6 network.'
            iso: '- (Optional, string) ID or Name of an ISO image to mount.'
            keep_disk: '- (Optional, bool) If true, do not upgrade the disk. This allows downgrading the server type later.'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            location: '- (Optional, string) The location name to create the server in. nbg1, fsn1, hel1, ash or hil'
            mac_address: '- (Optional, string) The MAC address the private interface of the server has'
            name: '- (Required, string) Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).'
            network: '- (Optional)  Network the server should be attached to on creation. (Can be specified multiple times)'
            network_id: '- (Required, int) ID of the network'
            placement_group_id: '- (Optional, string) Placement Group ID the server added to on creation.'
            public_net: |-
                - (Optional, block) In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).
                If this block is not defined, two primary (ipv4 & ipv6) ips getting auto generated.
            rebuild_protection: '- (Optional, bool) Enable or disable rebuild protection (Needs to be the same as delete_protection).'
            rescue: '- (Optional, string) Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. linux64 or linux32'
            server_type: '- (Required, string) Name of the server type this server should be created with.'
            shutdown_before_deletion: '- (bool) Whether to try shutting the server down gracefully before deleting it.'
            ssh_keys: '- (Optional, list) SSH key IDs or names which should be injected into the server at creation time. Once the server is created, you can not update the list of SSH Keys. If you do change this, you will be prompted to destroy and recreate the server. You can avoid this by setting lifecycle.ignore_changes to [ ssh_keys ].'
            status: '- (string) The status of the server.'
            user_data: '- (Optional, string) Cloud-Init user data to use during server creation'
        importStatements: []
    hcloud_server_network:
        subCategory: ""
        description: Provides a Hetzner Cloud Server Network to represent a private network on a server in the Hetzner Cloud.
        name: hcloud_server_network
        title: hcloud_server_network
        examples:
            - name: srvnetwork
              manifest: |-
                {
                  "ip": "10.0.1.5",
                  "network_id": "${hcloud_network.mynet.id}",
                  "server_id": "${hcloud_server.node1.id}"
                }
              references:
                network_id: hcloud_network.mynet.id
                server_id: hcloud_server.node1.id
              dependencies:
                hcloud_network.mynet: |-
                    {
                      "ip_range": "10.0.0.0/8",
                      "name": "my-net"
                    }
                hcloud_network_subnet.foonet: |-
                    {
                      "ip_range": "10.0.1.0/24",
                      "network_id": "${hcloud_network.mynet.id}",
                      "network_zone": "eu-central",
                      "type": "cloud"
                    }
                hcloud_server.node1: |-
                    {
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
        argumentDocs:
            alias_ips: |-
                - (Optional, list[string]) Additional IPs to be assigned
                to this server.
            id: '- (string) ID of the server network.'
            ip: |-
                - (Optional, string) IP to request to be assigned to this server.
                If you do not provide this then you will be auto assigned an IP
                address.
            network_id: |-
                - (Optional, int) ID of the network which should be added
                to the server. Required if subnet_id is not set. Successful creation
                of the resource depends on the existence of a subnet in the Hetzner
                Cloud Backend. Using network_id will not create an explicit
                dependency between server and subnet. Therefore depends_on may need
                to be used. Alternatively the subnet_id property can be used, which
                will create an explicit dependency between hcloud_server_network and
                the existence of a subnet.
            server_id: '- (Required, int) ID of the server.'
            subnet_id: |-
                - (Optional, string) ID of the sub-network which should be
                added to the Server. Required if network_id is not set.
                Note: if the ip property is missing, the Server is currently added
                to the last created subnet.
        importStatements: []
    hcloud_snapshot:
        subCategory: ""
        description: Provides a Hetzner Cloud snapshot to represent an image with type snapshot in the Hetzner Cloud.
        name: hcloud_snapshot
        title: hcloud_snapshot
        examples:
            - name: my-snapshot
              manifest: |-
                {
                  "server_id": "${hcloud_server.node1.id}"
                }
              references:
                server_id: hcloud_server.node1.id
              dependencies:
                hcloud_server.node1: |-
                    {
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
        argumentDocs:
            description: '- (Optional, string) Description of the snapshot.'
            id: '- (int) Unique ID of the snapshot.'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            server_id: '- (Required, int) Server to the snapshot should be created from.'
        importStatements: []
    hcloud_ssh_key:
        subCategory: ""
        description: Provides a Hetzner Cloud SSH key resource to manage SSH keys for server access.
        name: hcloud_ssh_key
        title: hcloud_ssh_key
        examples:
            - name: default
              manifest: |-
                {
                  "name": "Terraform Example",
                  "public_key": "${file(\"~/.ssh/id_rsa.pub\")}"
                }
        argumentDocs:
            fingerprint: '- (string) The fingerprint of the SSH key'
            id: '- (int) The unique ID of the key.'
            labels: '- (Optional, map) User-defined labels (key-value pairs) should be created with.'
            name: '- (Required, string) Name of the SSH key.'
            public_key: '- (Required, string) The public key. If this is a file, it can be read using the file interpolation function'
        importStatements: []
    hcloud_uploaded_certificate:
        subCategory: ""
        description: Upload a TLS certificate to Hetzner Cloud.
        name: hcloud_uploaded_certificate
        title: hcloud_uploaded_certificate
        examples:
            - name: sample_certificate
              manifest: |-
                {
                  "certificate": "-----BEGIN CERTIFICATE-----\nMIIDMDCCAhigAwIBAgIIJgROscP8RRUwDQYJKoZIhvcNAQELBQAwIDEeMBwGA1UE\n...\nTKS8gQ==\n-----END CERTIFICATE-----\n",
                  "labels": {
                    "label_1": "value_1",
                    "label_2": "value_2"
                  },
                  "name": "test-certificate-%d",
                  "private_key": "-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAorPccsHibgGLJIub5Sb1yvDvARifoKzg7MIhyAYLnJkGn9B1\n...\nAHcjLFCNvobInLHTTmCoAxYBmEv2eakas0+n4g/LM2Ukaw1Bz+3VrVo=\n-----END RSA PRIVATE KEY-----\n"
                }
        argumentDocs:
            certificate: '- (Required, string) PEM encoded TLS certificate.'
            created: '- (string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).'
            domain_names: '- (list) Domains and subdomains covered by the certificate.'
            fingerprint: '- (string) Fingerprint of the certificate.'
            id: '- (int) Unique ID of the certificate.'
            labels: |-
                - (Optional, map) User-defined labels (key-value pairs) the
                certificate should be created with.
            name: '- (Required, string) Name of the Certificate.'
            not_valid_after: '- (string) Point in time when the Certificate stops being valid (in ISO-8601 format).'
            not_valid_before: '- (string) Point in time when the Certificate becomes valid (in ISO-8601 format).'
            private_key: '- (Required, string) PEM encoded private key belonging to the certificate.'
        importStatements: []
    hcloud_volume:
        subCategory: ""
        description: Provides a Hetzner Cloud volume resource to manage volumes.
        name: hcloud_volume
        title: hcloud_volume
        examples:
            - name: master
              manifest: |-
                {
                  "automount": true,
                  "format": "ext4",
                  "name": "volume1",
                  "server_id": "${hcloud_server.node1.id}",
                  "size": 50
                }
              references:
                server_id: hcloud_server.node1.id
              dependencies:
                hcloud_server.node1: |-
                    {
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
        argumentDocs:
            automount: '- (Optional, bool) Automount the volume upon attaching it (server_id must be provided).'
            delete_protection: '- (Optional, bool) Enable or disable delete protection.'
            format: '- (Optional, string) Format volume after creation. xfs or ext4'
            id: '- (int) Unique ID of the volume.'
            labels: '- (map) User-defined labels (key-value pairs).'
            linux_device: '- (string) Device path on the file system for the Volume.'
            location: '- (Optional, string) The location name of the volume to create, not allowed if server_id argument is passed.'
            name: '- (Required, string) Name of the volume to create (must be unique per project).'
            server_id: '- (Optional, int) Server to attach the Volume to, not allowed if location argument is passed.'
            size: '- (Required, int) Size of the volume (in GB).'
        importStatements: []
    hcloud_volume_attachment:
        subCategory: ""
        description: Provides a Hetzner Cloud Volume attachment to attach a Volume to a Hetzner Cloud Server.
        name: hcloud_volume_attachment
        title: hcloud_volume_attachment
        examples:
            - name: main
              manifest: |-
                {
                  "automount": true,
                  "server_id": "${hcloud_server.node1.id}",
                  "volume_id": "${hcloud_volume.master.id}"
                }
              references:
                server_id: hcloud_server.node1.id
                volume_id: hcloud_volume.master.id
              dependencies:
                hcloud_server.node1: |-
                    {
                      "datacenter": "nbg1-dc3",
                      "image": "debian-11",
                      "name": "node1",
                      "server_type": "cx11"
                    }
                hcloud_volume.master: |-
                    {
                      "location": "nbg1",
                      "size": 10
                    }
        argumentDocs:
            automount: '- (Optional, bool) Automount the volume upon attaching it.'
            id: '- (int) Unique ID of the Volume Attachment.'
            server_id: '- (Required, int) Server to attach the Volume to.'
            volume_id: '- (Required, int) ID of the Volume.'
        importStatements: []
